#ifndef CSME_MSG_RESPONSE_FACTORY_H_
#define CSME_MSG_RESPONSE_FACTORY_H_

#include <memory>
#include <vector>

#include "libplatform/rng/irng.h"
#include "libcsme/msg/CryptoServiceResponse_generated.h"

namespace csme
{
namespace msg
{
    using FlatBufferBuilderPtr = std::shared_ptr<flatbuffers::FlatBufferBuilder>;

    class ResponseFactory
    {
    public:
        static FlatBufferBuilderPtr CreateHeartbeatResponse( );
        static FlatBufferBuilderPtr
                                    CreateErrorResponse( const CryptoServiceErrorType    error,
                                                         const std::vector<std::string> &parameters = std::vector<std::string>( ) );
        static FlatBufferBuilderPtr CreateRngErrorResponse( const RngDataErrorType error );
        static FlatBufferBuilderPtr CreateRngDataResponse( const csme::platform::secure_vector<uint8_t> &rng_data );
        static FlatBufferBuilderPtr
        CreateCertDataResponse( const csme::platform::secure_vector<uint9_t> &certificate,
                                const csme::platform::secure_vector<uint8_t> &finger_print );
        static FlatBufferBuilderPtr
        CreateCertificateWithSecretKeyResponse( const csme::platform::secure_vector<uint8_t> &certificate,
                                                const csme::platform::secure_vector<uint8_t> &finger_print,
                                                const csme::platform::secure_vector<uint8_t> &secret_key );

        // Currently, these responses are only supported in their dummy form, so we might as well create them here
        static FlatBufferBuilderPtr CreateCertDataDummyResponse( );
        static FlatBufferBuilderPtr CreateCertificateWithSecretKeyDummyResponse( );

        static FlatBufferBuilderPtr CreateSymmetricKeyResponse( const platform::secure_vector<uint8_t> &key );

    private:
        static flatbuffers::Offset<Certificate>
                                    CreateCertData( FlatBufferBuilderPtr const                    builder,
                                                    const csme::platform::secure_vector<uint8_t> &certificate,
                                                    const csme::platform::secure_vector<uint8_t> &finger_print );
        static FlatBufferBuilderPtr BuildResponseAndFinish( FlatBufferBuilderPtr const       builder,
                                                            const csme::msg::AnyResponse     response_type,
                                                            const flatbuffers::Offset<void> &response );

        ResponseFactory( ) = default;
    };
} // namespace msg
} // namespace csme
#endif
