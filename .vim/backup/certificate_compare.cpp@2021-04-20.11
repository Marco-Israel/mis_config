#include <algorithm>
#include <bits/stdint-uintn.h>
#include <catch2/catch.hpp>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <iostream>
#include <ostream>
//
#include "golden_certificates/root-ca-1.h"
#include "golden_certificates/sub-ca-1.h"
#include "golden_certificates/subscriber-1.h"

#include "silver_certificates/root-ca-2.h"
#include "silver_certificates/sub-ca-2.h"
#include "silver_certificates/subscriber-2.h"
//

extern "C" {
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "dumpasn1.h"
}

// Device under test
#include "libcryptoservice/util/static_map.hpp"

namespace test
{
namespace unit
{
    namespace crypto_service
    {
        namespace generators
        {
            namespace
            {
                TEST_CASE( "libcryptoservice/generators/certificate_compare" )
                {
                    SECTION( "Root Certificate compare" )
                    {

                        uint8_t argc, n= 0;
                        char* argv[] = {};

                        int ret = 0;
                        int roffset = 2;
                        int offset = 0;
                        uint16_t min_len = std::min(
                                golden_certificates_root_ca_1_der_len, silver_certificates_root_ca_2_der_len) ;

                        FILE * tmpFile2 = fmemopen(golden_certificates_root_ca_1_der,
                                golden_certificates_root_ca_1_der_len, "rb+");

                          while (offset < min_len) {
                            if ( golden_certificates_root_ca_1_der[offset] != silver_certificates_root_ca_2_der[offset])
                             {
                                std::cout << "\OOFFSET" << offset<<"\n";
                                ret = dumpasn1(tmpFile2,(offset), argc, argv );

                                if( 0> ret) {
                                std::cout << "\OOFFSET\n" << offset-roffset<< "\n"<<std::endl;

                                    ret = dumpasn1(tmpFile2,(offset-roffset), argc, argv );
                                    roffset++;
                                }
                                std::cout << "\n RET:  \n" << ret << "\n"<<std::endl;

                                if (  0 < ret ) {
                                    offset = ret;
                                }
                             }
                                offset++;
                          }

                          fclose(tmpFile2);
                          }
                    }
            } // namespace
        }     // namespace generators
    }         // namespace crypto_service
} // namespace unit
} // namespace test
