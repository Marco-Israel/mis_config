#!/bin/bash

_usage() {
cat <<-EOF
                "${0##*/}"
################################################################################

@author     Marco Israel (MI)
@date       2021
@brief      Geberate a certificate test folder and run the creation script.
@detail     If the testfolder and testcase already exists, the script will only
            Execute the test. In both cases:
            - the results will be copied into the testcase folder called output
            - The compiler log file will be saved into the outpudfolder
            - Beside the keys and certificatess also a human readlbe certificate
              is placed into the output/hu folder
            - The testlist README file will gets open so you can update it
            - The new tree or changed files will be commited to git finaly


  USAGE:
 "${0##*/} <testName> <testCase>

 @example
 "${0##*/} 1.2.3.4_myRequirement 1_my_test_case

################################################################################
# END OF HELP.
EOF
}



_gen_readme() {
cat <<-EOF > "$1/$2"/README
TEST
"$1"
--------------------------------------------------------------------------------
REQUIRED SCOPE:

1.
TODO the kind to test out of the required text part.


--------------------------------------------------------------------------------
TESTLIST:

1_TODO_test_name
TODO Test description. E.g. what is the test defining in configuration files.


--------------------------------------------------------------------------------
1_TODO_test_name

EXPECT:
TODO what result is expacted. E.g. the Result mentiond out in manuals

RESULT
TRUE or FALSE
TODO in case of FALSE (result not equivalent to the expactation) a result
description. In case of TRUE no further explanation is needed.


--- EOF ------------------------------------------------------------------------
EOF
}

_gen_all_tests() {
    NAME="$1"
    TEST_CASE="$2"
    GIT_LOG_TAG="WIP"
    FLAGS=$3
    TEMPLATE_FOLDER=$4

    if [ ! -d $NAME ]
    then
    echo "NEW REQUIRED"
        mkdir "$NAME"
        _gen_readme "$NAME"
    fi

    if [ ! -d $NAME/$TEST_CASE ]
    then
        echo "NEW TESTCASE"
        cp -r $TEMPLATE_FOLDER "$NAME/$2"
        git checkout $TEMPLATE_FOLDER
        GIT_LOG_TAG="INIT"
    else
        rm -rf "$NAME/$TEST_CASE"/output
    fi


    if [ -f ./create-certificates.sh ]
    then
         ./create-certificates.sh "$NAME/$TEST_CASE" 1> /tmp/tmp.log 2>&1
     else
         echo "The script to generate the certificates was not found"
         echo "The Script needs to be in the same folder then this script"
    fi

     cat /tmp/tmp.log


     if [ ! "$FLAGS" = "--noresults" ]
     then
        mv ./output "$NAME/$TEST_CASE"
        mv /tmp/tmp.log "$NAME/$TEST_CASE/"output/compiler.log
    else
        rm -rf ./output
        rm /tmp/tmp.log
    fi


     vim "$NAME/README"
     git add "$NAME"
     git commit "$NAME" -m "$GIT_LOG_TAG TEST [$NAME]"
}

_gen_all_tests() {

    if [ ! -f ./create-certificates.sh ]
    then
         echo "The script to generate the certificates was not found"
         echo "The Script needs to be in the same folder then this script"
         break
    fi

   TEST_FOLDER=$1
   for FOLDER in $TEST_FOLDER/*
   do
       if [ -d $FOLDER ]
       then
            for TEST_CASE in $FOLDER/*
            do
                if [ -d $TEST_CASE ]
                then
                    ./create-certificates.sh "$FOLDER/$TEST_CASE" \
                        1> /tmp/tmp.log 2>&1
                else
                    continue
                fi
            done
       else
           continue
       fi
   done
}



### MAIN #######################################################################

_main() {
INPUT_FOLDER=./golden_certificates
OUTPUT_FOLDER=./silver_certificates

if [ "$#" -eq  2 ]
then
    _gen_test_case "$OUTPUT_FOLDER/$1" "$2" "$3" "$INPUT_FOLDER"
elif [ "$1" = "--all" ] || [ "$2" = "--all" ]
then
    _gen_all_tests "$OUTPUT_FOLDER" $2
else
    _usage
fi
}
_main $1 $2

### EOF ########################################################################
