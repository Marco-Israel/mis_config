TEST
"3.2.5.3_Ex_extension_SubjectDirectoryAttributes_Attribute_Clearance"
--------------------------------------------------------------------------------
REQUIRED SCOPE:

1.
Clearance [..]  has set all of the prescribed clearance bits [...] the bitwise
AND must not evaluate to zero.

2.
If certificate i [..] and the attribute Clearance therein, then certificate i-1
MUST either contain the attribute Clearance which covers all classification bits
of certificate i, or must not contain the attribute Clearance at all.

3.
If certificate i-1 contains [...] and the attribute Clearance therein, then
certificate i MUST contain the attribute Clearance, too, and list no more
clearance levels than certificate i-1.

4.
The absence of the attribute Clearance represents all clearances.

5. from 3.2.2.9.1 Attribute Clearance
The bit fields of the attribute ClassList are subsequently set from low to high
without gaps; e.g. if the bit confidential is set to 1, then the low-order
bits unmarked, unclassified and restricted are set to 1, too.

6. from 3.2.2.9.1 Attribute Clearance
The SET of security categories MAY be limited to 1 element. The one and only
SecurityCategory MAY be assumed to adhere to the following restriction:
The attribute type refers to a proprietary OID, the set of admissible OIDs is
known at compile-time. The type of the attribute value is PrintableString.


--------------------------------------------------------------------------------
TESTLIST:

1_different_clearanceBitmask_in_root_and_sub
According to the requirements root shall have at least the highest bits set
which are also used by the sub certificate. In other words, sub shall not have
bits set which are not set by the root certificate (and also higher ranked)

2_clearance_not_implemented_in_root
If the clearance attribute is missed, the software shall expect that all
clearance bits are set.

3_gaps_in_clearance_bitmask
According to the description in 5. from 3.2.2.9.1 Attribute Clearance; low order
bits shall be set by the software if they are not set in the certificate.

4_securityCategory_value_with_OID_instead_printableString
According to the requirements the value of the SecurityCategory shall be a
a PrintableString and nothing else. Because type is according to the referance
of type OID this is only changed to the same as the value (my we generate a
circle this way).

5_multi_securityCategory
According to the requirements only one security category shall be allowed. So
trying to use more than once.

--------------------------------------------------------------------------------
1_different_clearanceBitmask_in_root_and_sub

EXPECT:
because openssl does not support SubjectKeyIdentifier and does also not support
clearance, the certificates will be generated regardless of the bits. In other
words The bits will not be checked by openssl because it is not supported..

RESULT:
TRUE


--------------------------------------------------------------------------------
2_clearance_not_implemented_in_root

EXPECT:
The same as 1_different_clearanceBitmask_in_root_and_sub. Openssel does not
support clearance and so it will not care about if it is available or not

RESULT:
TRUE


--------------------------------------------------------------------------------
3_gaps_in_clearance_bitmask/

EXPECT:
The same as 1_different_clearanceBitmask_in_root_and_sub. Openssel does not
support clearance and so it will not care about if it is available or not

RESULT:
TRUE

--------------------------------------------------------------------------------
4_securityCategory_value_with_OID_instead_printableString

EXPECT:
Because the type of value is according to the standard not defined, openssl will
generate the certificates

RESULT
TRUE

--------------------------------------------------------------------------------
5_multi_securityCategory

EXPECT:
Because the standard allows multi categories, the certificates will be generated

RESULT:
TRUE
--- EOF ------------------------------------------------------------------------
