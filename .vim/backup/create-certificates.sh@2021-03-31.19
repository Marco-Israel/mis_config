#!/bin/sh
set -e
################################################################################
# @Author:  Matthias Nagel, Marco israel
#รถ@Date:    2019-11-21
# @Brief    Generate PKI Key pairs and certificates by use of openssl tools.
################################################################################

DIR_CONFIG="."
DIR_KEY="./output/privat_keys"
DIR_CERT="./output/certificates"
DIR_DBS="./output/database"
DIR_TAS="./output/tas"
DIR_HU="./output/human_readable"

_generateCertificate() {
    THIS=$1
    CA=$2

    echo ""
    echo "====================================================================="
    echo "Create $THIS certificate"
    echo "====================================================================="

    touch "$DIR_DBS/${BASE_NAME}-index.txt"

    # ecparam:  Generates a private key key *.pen from an elliptic curve (EC)
    openssl ecparam -name secp384r1 -genkey -noout -out "$DIR_KEY/$THIS.pem"
    openssl ecparam -name secp384r1 -text -in "$DIR_KEY/$THIS".pem \
        -out "$DIR_HU/$THIS.key.txt"

    # req:  Creates certificate in PKCS#10 format and (or) can create self
    #       signed certificates for use as root CAs for example.
    openssl req -new -utf8 -config "$DIR_CONFIG/$THIS".cnf \
        -key "$DIR_KEY/$THIS.pem" -out "$DIR_CERT/$THIS".pem

    openssl req -text -verify -in "$DIR_CERT/$THIS".pem \
     -out "$DIR_HU/$THIS.csr.txt"

    if [ $THIS = $CA ]
    then
        # ca:   Sign ROOT certificate given by the input.
        # The self signed root CA certificate needs to include the extensions
        openssl ca -batch -utf8 -config "$DIR_CONFIG/$CA.cnf" -create_serial \
            -extensions self_issued_extensions -selfsign  \
            -verbose -in "$DIR_CERT/$THIS.pem" -notext -out "$DIR_CERT/$THIS.pem"

        cp $DIR_CERT/$THIS.pem $DIR_TAS/$THIS.pem

    else
        # ca:   Sign USER certificate given by the input.
        openssl ca -batch -utf8 -config "$DIR_CONFIG/$CA.cnf" -create_serial \
            -verbose -in "$DIR_CERT/$THIS.pem" -notext -out "$DIR_CERT/$THIS.pem"
    fi

    openssl x509 -in "$DIR_CERT/$THIS.pem" \
        -outform DER -out "$DIR_CERT/$THIS.der"


    openssl x509 -text -inform der -in "$DIR_CERT/$THIS.der" \
        -out "$DIR_HU/$THIS.cert.txt"

    echo "====================================================================="
}

# Create Root CA certificate
_createCA_root() {
    BASE_NAME="root-ca-1"
    CACONF_FILE="${BASE_NAME}"

    _generateCertificate $BASE_NAME $CACONF_FILE
}

_createCA_sub() {
    # Create Sub CA certificate
    BASE_NAME="sub-ca-1"
    CACONF_FILE="root-ca-1"
    _generateCertificate $BASE_NAME $CACONF_FILE
}


_createCA_subscriber() {
    # Create a subscriber certificate
    BASE_NAME="subscriber-1"
    CACONF_FILE="sub-ca-1"

    _generateCertificate $BASE_NAME $CACONF_FILE
}


##### MAIN #####################################################################
rm -rf output
mkdir -p $DIR_TAS
mkdir -p $DIR_KEY
mkdir -p $DIR_DBS
mkdir -p $DIR_CERT
mkdir -p $DIR_HU

_createCA_root

_createCA_sub

_createCA_subscriber
################################################################################

